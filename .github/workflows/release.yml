name: Release

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches: [main]
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package.json'
      - 'pnpm-lock.yaml'

jobs:
  # Check if we should create a release
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version-type: ${{ steps.check.outputs.version-type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=${{ github.event.inputs.version-type }}" >> $GITHUB_OUTPUT
          else
            # Check for conventional commits since last release
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "version-type=patch" >> $GITHUB_OUTPUT
            else
              # Check for feat: (minor) or BREAKING CHANGE (major) commits
              COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --oneline)
              if echo "$COMMITS_SINCE_TAG" | grep -q "feat\|BREAKING CHANGE"; then
                if echo "$COMMITS_SINCE_TAG" | grep -q "BREAKING CHANGE"; then
                  echo "should-release=true" >> $GITHUB_OUTPUT
                  echo "version-type=major" >> $GITHUB_OUTPUT
                else
                  echo "should-release=true" >> $GITHUB_OUTPUT
                  echo "version-type=minor" >> $GITHUB_OUTPUT
                fi
              elif echo "$COMMITS_SINCE_TAG" | grep -q "fix\|perf"; then
                echo "should-release=true" >> $GITHUB_OUTPUT
                echo "version-type=patch" >> $GITHUB_OUTPUT
              else
                echo "should-release=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  # Quality checks
  quality-check:
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run quality checks
        run: pnpm run check

      - name: Build application
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Create release
  release:
    needs: [check-release, quality-check]
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release
        id: release
        run: |
          if [ "${{ needs.check-release.outputs.version-type }}" = "major" ]; then
            pnpm run release:major
          elif [ "${{ needs.check-release.outputs.version-type }}" = "minor" ]; then
            pnpm run release:minor
          else
            pnpm run release:patch
          fi

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push changes
        run: |
          git push --follow-tags origin main

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create dist archive
        run: |
          cd dist && zip -r ../dist.zip . && cd ..

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.release.outputs.version }}
          release_name: Release v${{ steps.release.outputs.version }}
          body: |
            ## What's Changed

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ## Installation

            Visit [Push-Up Counter PWA](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/) to use the application.

            ## Download

            You can also download the build artifacts below.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: push-up-counter-v${{ steps.release.outputs.version }}.zip
          asset_content_type: application/zip

  # Deploy to production
  deploy:
    needs: [release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Deploy to Vercel
        run: echo "Deploy step - configure with your deployment service"
        # Add your deployment steps here
